name: Deploy Python App to VDS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH on GitHub Actions Runner
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VDS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        # Add VDS's host key to runner's known_hosts
        ssh-keyscan -H ${{ secrets.VDS_IP }} >> ~/.ssh/known_hosts

    - name: Deploy application and service file
      run: |
        # Define variables for the remote server
        VDS_USER="${{ secrets.VDS_USER }}"
        VDS_IP="${{ secrets.VDS_IP }}"
        APP_DIR="/opt/my-python-app"
        REPO_SSH="git@github.com:Notenlish/hukuksuzlugun-bedeli.git"
        SERVICE_FILE_REMOTE="/etc/systemd/system/myapp.service"
        SERVICE_FILE_LOCAL="./backend/myapp.service" # Adjust this path if your service file is elsewhere

        # --- IMPORTANT SSH KEY AND HOST KEY SETUP ON VDS ---
        # 1. Transfer GitHub Deploy Key to VDS
        #    This secret (VDS_GITHUB_DEPLOY_KEY) should contain the PRIVATE KEY
        #    of an SSH key pair that you've added as a Deploy Key to your GitHub repo.
        echo "Transferring GitHub deploy key to VDS..."
        # Using printf to ensure no extra newlines from echo, and direct write
        # Also ensure .ssh directory has correct permissions before putting key
        printf "%s" "${{ secrets.VDS_GITHUB_DEPLOY_KEY }}" | ssh "$VDS_USER@$VDS_IP" "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat > ~/.ssh/github_deploy_key && chmod 600 ~/.ssh/github_deploy_key"

        # 2. SSH into VDS to perform initial setup/update and configure Git
        ssh "$VDS_USER@$VDS_IP" << 'EOF'
          # Enable verbose shell output for debugging
          set -x

          APP_DIR="/opt/my-python-app" # Redefine for the remote shell context
          REPO_SSH="git@github.com:Notenlish/hukuksuzlugun-bedeli.git"

          # --- DEBUGGING: Verify SSH key and known_hosts on VDS ---
          echo "--- Debugging SSH setup on VDS ---"
          ls -la ~/.ssh/
          cat ~/.ssh/github_deploy_key # Verify content (sensitive, but for debug)
          cat ~/.ssh/known_hosts # Verify content

          # Add github.com's host key to the VDS's known_hosts
          echo "Adding github.com to VDS's known_hosts (if not already present)..."
          # Use ssh-keyscan with -H to hash hostnames and append, redirect stderr to /dev/null
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2>/dev/null
          chmod 600 ~/.ssh/known_hosts

          echo "--- Testing SSH connection to GitHub directly ---"
          # Test SSH connection using the deploy key and specific known_hosts
          # This command will give more detailed error messages if SSH fails
          ssh -i ~/.ssh/github_deploy_key -o UserKnownHostsFile=~/.ssh/known_hosts -T git@github.com || { echo "SSH connection test failed. Check key, permissions, and host key."; exit 1; }
          echo "SSH connection test successful."

          # Configure Git to use the transferred deploy key for authentication
          echo "Configuring Git to use the deploy key for GitHub..."
          # Ensure this is set globally for the user running git clone
          git config --global core.sshCommand "ssh -i ~/.ssh/github_deploy_key -o UserKnownHostsFile=~/.ssh/known_hosts -o StrictHostKeyChecking=yes"

          # Verify git config
          echo "--- Verifying Git SSH command config ---"
          git config --global core.sshCommand

          # Perform Git operations
          if [ -d "$APP_DIR/.git" ]; then
              echo "Repo exists. Fetching latest..."
              cd "$APP_DIR"
              git fetch origin
              git reset --hard origin/main
          else
              echo "Cloning repo..."
              git clone "$REPO_SSH" "$APP_DIR"
          fi

          cd "$APP_DIR/backend"
          pip3 install -r requirements.txt
        EOF

        # Transfer the service file using scp (from GitHub Actions runner to VDS)
        echo "Transferring systemd service file..."
        scp "$SERVICE_FILE_LOCAL" "$VDS_USER@$VDS_IP:$SERVICE_FILE_REMOTE"

        # SSH back into VDS to manage the service
        ssh "$VDS_USER@$VDS_IP" << 'EOF_SERVICE_MGMT'
          set -e

          SERVICE_FILE="/etc/systemd/system/myapp.service" # Redefine for the remote shell context

          echo "Reloading systemd daemon and restarting service..."
          systemctl daemon-reexec
          systemctl daemon-reload
          systemctl enable myapp || true # '|| true' to prevent error if already enabled
          systemctl restart myapp
        EOF_SERVICE_MGMT
