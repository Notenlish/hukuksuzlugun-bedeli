name: Deploy Python App to VDS (PAT Method with venv and Python 3.12)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH on GitHub Actions Runner
      run: |
        # Create .ssh directory if it doesn't exist and set permissions
        mkdir -p ~/.ssh
        # Write the VDS SSH private key from GitHub Secrets to id_rsa
        echo "${{ secrets.VDS_SSH_KEY }}" > ~/.ssh/id_rsa
        
        chmod 600 ~/.ssh/id_rsa
        # Add VDS's host key to runner's known_hosts to prevent SSH warnings/errors
        ssh-keyscan -H ${{ secrets.VDS_IP }} >> ~/.ssh/known_hosts

    - name: Deploy application and service file
      run: |
        VDS_USER="${{ secrets.VDS_USER }}"
        VDS_IP="${{ secrets.VDS_IP }}"
        APP_DIR="/opt/my-python-app"
        
        # Use HTTPS with GitHub Personal Access Token (PAT) for cloning
        REPO_HTTPS="https://oauth2:${{ secrets.GH_PAT }}@github.com/Notenlish/hukuksuzlugun-bedeli.git"
        SERVICE_FILE_REMOTE="/etc/systemd/system/myapp.service"
        SERVICE_FILE_LOCAL="./backend/myapp.service" # Path to your local service file

        # SSH into VDS to perform initial setup/update and clone with PAT
        ssh "$VDS_USER@$VDS_IP" << 'EOF'
          # Enable verbose shell output and exit immediately if any command fails
          set -ex

          # Redefine variables for the remote shell context
          APP_DIR="/opt/my-python-app"

          # --- IMPORTANT: Forcefully clear apt locks ---
          echo "Attempting to clear any existing apt locks..."
          sudo killall apt apt-get || true
          sudo rm -f /var/lib/dpkg/lock-frontend
          sudo rm -f /var/lib/dpkg/lock
          sudo rm -f /var/cache/apt/archives/lock
          sudo dpkg --configure -a || true
          echo "Apt lock clearing attempt complete."


          echo "Updating system packages..."
          sudo apt update

          if ! command -v python3.12 &> /dev/null; then
              echo "Python 3.12 not found. Installing now..."
              sudo apt install -y software-properties-common
              sudo add-apt-repository ppa:deadsnakes/ppa -y
              sudo apt update
              sudo apt install -y python3.12 python3.12-venv
          else
              echo "Python 3.12 is already installed."
          fi

          # Ensure git is installed
          if ! command -v git &> /dev/null; then
              echo "Git not found. Installing now..."
              sudo apt install -y git
          else
              echo "Git is already installed."
          fi

          echo "Cloning/Fetching repository using HTTPS with Personal Access Token..."
          if [ -d "$APP_DIR/.git" ]; then
              echo "Repository already exists. Fetching latest changes..."
              cd "$APP_DIR"
              git fetch origin
              git reset --hard origin/main # Hard reset to match the remote main branch
          else
              echo "Repository does not exist. Cloning it now..."
              mkdir -p "$(dirname "$APP_DIR")"
              git clone "https://oauth2:${{ secrets.GH_PAT }}@github.com/Notenlish/hukuksuzlugun-bedeli.git" "$APP_DIR"
          fi

          # IMPORTANT: Remove the PAT from the shell history on the VDS for security
          history -d $((HISTCMD-1)) || true

          cd "$APP_DIR/backend"

          # Remove existing venv before recreating with new Python version
          if [ -d "venv" ]; then
              echo "Removing existing virtual environment..."
              rm -rf venv
          fi

          echo "Setting up Python virtual environment with Python 3.12..."
          python3.12 -m venv venv
          source venv/bin/activate

          echo "Installing Python dependencies into the virtual environment..."
          pip install -r requirements.txt

          # Deactivate the virtual environment for the current SSH session
          deactivate
        EOF

        # Transfer the service file using scp from the GitHub Actions runner to VDS
        echo "Transferring systemd service file..."
        scp "$SERVICE_FILE_LOCAL" "$VDS_USER@$VDS_IP:$SERVICE_FILE_REMOTE"

        # SSH back into VDS to manage the systemd service
        ssh "$VDS_USER@$VDS_IP" << 'EOF_SERVICE_MGMT'
          # Enable verbose shell output and exit immediately if any command fails
          set -ex

          # Redefine service file path for the remote shell context
          SERVICE_FILE="/etc/systemd/system/myapp.service"

          echo "Reloading systemd daemon and restarting service..."
          systemctl daemon-reexec
          systemctl daemon-reload
          systemctl enable myapp || true
          systemctl restart myapp
          echo "Service status:"
          systemctl status myapp --no-pager
        EOF_SERVICE_MGMT

    - name: Run filldata.py script
      run: |
        VDS_USER="${{ secrets.VDS_USER }}"
        VDS_IP="${{ secrets.VDS_IP }}"
        APP_DIR="/opt/my-python-app"

        ssh "$VDS_USER@$VDS_IP" << 'EOF_FILLDATA'
          set -ex
          APP_DIR="/opt/my-python-app"
          cd "$APP_DIR/backend"
          source venv/bin/activate
          echo "Running filldata.py..."
          python3 filldata.py
          deactivate
        EOF_FILLDATA