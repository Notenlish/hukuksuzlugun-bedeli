name: Deploy Python App to VDS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      # This step is essential now as we need to access files from the repo (like myapp.service)
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VDS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VDS_IP }} >> ~/.ssh/known_hosts

    - name: Deploy application and service file
      run: |
        # Define variables for the remote server
        VDS_USER="${{ secrets.VDS_USER }}"
        VDS_IP="${{ secrets.VDS_IP }}"
        APP_DIR="/opt/my-python-app"
        REPO_SSH="git@github.com:Notenlish/hukuksuzlugun-bedeli.git"
        SERVICE_FILE_REMOTE="/etc/systemd/system/myapp.service"
        SERVICE_FILE_LOCAL="./backend/myapp.service" # Adjust this path if your service file is elsewhere

        # SSH into VDS and perform initial setup/update
        ssh "$VDS_USER@$VDS_IP" << 'EOF'
          set -e

          APP_DIR="/opt/my-python-app" # Redefine for the remote shell context
          REPO_SSH="git@github.com:Notenlish/hukuksuzlugun-bedeli.git"

          if [ -d "$APP_DIR/.git" ]; then
              echo "Repo exists. Fetching latest..."
              cd "$APP_DIR"
              git fetch origin
              git reset --hard origin/main
          else
              echo "Cloning repo..."
              git clone "$REPO_SSH" "$APP_DIR"
          fi

          cd "$APP_DIR/backend"
          pip3 install -r requirements.txt
        EOF

        # Transfer the service file using scp
        echo "Transferring systemd service file..."
        scp "$SERVICE_FILE_LOCAL" "$VDS_USER@$VDS_IP:$SERVICE_FILE_REMOTE"

        # SSH back into VDS to manage the service
        ssh "$VDS_USER@$VDS_IP" << 'EOF_SERVICE_MGMT'
          set -e

          SERVICE_FILE="/etc/systemd/system/myapp.service" # Redefine for the remote shell context

          # Check if the service file was just created/updated and needs enabling
          # This check is simplified as scp will always overwrite/create
          echo "Reloading systemd daemon and restarting service..."
          systemctl daemon-reexec
          systemctl daemon-reload
          systemctl enable myapp || true # '|| true' to prevent error if already enabled
          systemctl restart myapp
        EOF_SERVICE_MGMT
