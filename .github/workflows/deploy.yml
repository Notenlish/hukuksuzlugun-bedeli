name: Deploy Python App to VDS (PAT Method with venv)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH on GitHub Actions Runner
      run: |
        # Create .ssh directory if it doesn't exist and set permissions
        mkdir -p ~/.ssh
        # Write the VDS SSH private key from GitHub Secrets to id_rsa
        echo "${{ secrets.VDS_SSH_KEY }}" > ~/.ssh/id_rsa
        # Set strict permissions for the private key
        chmod 600 ~/.ssh/id_rsa
        # Add VDS's host key to runner's known_hosts to prevent SSH warnings/errors
        ssh-keyscan -H ${{ secrets.VDS_IP }} >> ~/.ssh/known_hosts

    - name: Deploy application and service file
      run: |
        # Define variables for the remote server
        VDS_USER="${{ secrets.VDS_USER }}"
        VDS_IP="${{ secrets.VDS_IP }}"
        APP_DIR="/opt/my-python-app"
        # Use HTTPS with GitHub Personal Access Token (PAT) for cloning
        # Format: https://USERNAME:PAT@github.com/OWNER/REPO.git
        REPO_HTTPS="https://oauth2:${{ secrets.GH_PAT }}@github.com/Notenlish/hukuksuzlugun-bedeli.git"
        SERVICE_FILE_REMOTE="/etc/systemd/system/myapp.service"
        SERVICE_FILE_LOCAL="./backend/myapp.service" # Path to your local service file

        # --- SSH into VDS to perform initial setup/update and clone with PAT ---
        ssh "$VDS_USER@$VDS_IP" << 'EOF'
          # Enable verbose shell output and exit immediately if any command fails
          set -ex

          # Redefine variables for the remote shell context
          APP_DIR="/opt/my-python-app"
          REPO_HTTPS="${{ secrets.GH_PAT }}" # This will be replaced by the actual PAT in the outer shell, then used in the clone command.
                                             # Note: The REPO_HTTPS variable itself isn't directly used here; the PAT is interpolated into the git clone command.

          echo "Updating system packages and installing prerequisites (git, python3-venv, pip)..."
          # Update package lists
          sudo apt update
          # Install necessary packages: git, python3-venv (for virtual environments), python3-pip
          sudo apt install git python3-venv python3-pip -y

          echo "Cloning/Fetching repository using HTTPS with Personal Access Token..."
          if [ -d "$APP_DIR/.git" ]; then
              echo "Repository already exists. Fetching latest changes..."
              cd "$APP_DIR"
              git fetch origin
              git reset --hard origin/main # Hard reset to match the remote main branch
          else
              echo "Repository does not exist. Cloning it now..."
              # Ensure the parent directory for the application exists
              mkdir -p "$(dirname "$APP_DIR")"
              # Clone the repository using HTTPS with the PAT for authentication
              # The PAT is directly interpolated into the URL here.
              git clone "https://oauth2:${{ secrets.GH_PAT }}@github.com/Notenlish/hukuksuzlugun-bedeli.git" "$APP_DIR"
          fi

          # IMPORTANT: Remove the PAT from the shell history on the VDS for security
          # This line attempts to remove the last command from the shell history.
          history -d $((HISTCMD-1)) || true
          
          cd "$APP_DIR/backend"
          echo "Setting up Python virtual environment..."
          # Create a virtual environment named 'venv'
          python3 -m venv venv
          # Activate the virtual environment
          source venv/bin/activate
          
          echo "Installing Python dependencies into the virtual environment..."
          # Install dependencies using the venv's pip
          pip install -r requirements.txt
          
          # Deactivate the virtual environment for the current SSH session
          deactivate
        EOF

        # Transfer the service file using scp from the GitHub Actions runner to VDS
        echo "Transferring systemd service file..."
        scp "$SERVICE_FILE_LOCAL" "$VDS_USER@$VDS_IP:$SERVICE_FILE_REMOTE"

        # SSH back into VDS to manage the systemd service
        ssh "$VDS_USER@$VDS_IP" << 'EOF_SERVICE_MGMT'
          # Enable verbose shell output and exit immediately if any command fails
          set -ex

          # Redefine service file path for the remote shell context
          SERVICE_FILE="/etc/systemd/system/myapp.service"

          echo "Reloading systemd daemon and restarting service..."
          # Reload the systemd manager configuration
          systemctl daemon-reexec
          systemctl daemon-reload
          # Enable the service to start on boot (if not already enabled). '|| true' prevents error if already enabled.
          systemctl enable myapp || true
          # Restart the application service
          systemctl restart myapp
          echo "Service status:"
          # Display the status of the service without pagination
          systemctl status myapp --no-pager
        EOF_SERVICE_MGMT
